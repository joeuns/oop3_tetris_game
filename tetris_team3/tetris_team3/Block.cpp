#include "Block.h"
#include "Board.h"

const char Block::shapes_[21][4][4][4] = {
    {
        { {0,0,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,0,0,0}, {1,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,0,1,1}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,0,1,0}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,0,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,0,0,0}, {1,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,0,0} }
    },
    {
        { {0,1,0,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,0,0}, {0,1,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,0,0}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,0,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,1,0} },
        { {0,0,0,0}, {0,0,0,0}, {1,1,1,1}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,1,0,0} }
    },
    {
        { {0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,1,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,0,0}, {0,1,0,0}, {0,0,0,0} }
    },
    {
        { {0,0,1,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0} }
    },
    {
        { {1,0,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,1,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,1,0}, {0,0,1,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {1,1,0,0}, {0,0,0,0} }
    },
    {
        { {0,1,1,0}, {1,1,0,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,1,0}, {0,0,1,0}, {0,0,0,0} },
        { {0,0,0,0}, {0,1,1,0}, {1,1,0,0}, {0,0,0,0} },
        { {1,0,0,0}, {1,1,0,0}, {0,1,0,0}, {0,0,0,0} }
    },
    {
        { {1,1,0,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,0,0}, {1,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,1,1,0}, {1,1,0,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,1,0}, {0,0,1,1}, {0,0,0,0} },
        { {0,1,0,0}, {0,0,1,1}, {0,1,1,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,1,0}, {0,1,0,0}, {0,0,0,0} }
    },
    {
        { {1,1,0,0}, {1,1,0,0}, {1,0,0,0}, {0,0,0,0} },
        { {1,1,1,0}, {0,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,0,0}, {1,1,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {1,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0} }
    },
    {
        { {1,1,1,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {1,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {1,1,1,0}, {0,0,1,0}, {0,0,0,0} }
    },
    {
        { {1,0,1,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0} },
        { {0,1,1,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,0,0}, {1,1,1,0}, {1,0,1,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,0,0}, {1,1,0,0}, {0,0,0,0} }
    },
    {
        { {1,0,0,0}, {1,0,0,0}, {1,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,0,1,0}, {1,1,1,0}, {0,0,0,0} },
        { {1,1,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,0,0} },
        { {1,1,1,0}, {1,0,0,0}, {1,0,0,0}, {0,0,0,0} }
    },
    {
        { {1,0,0,0}, {1,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {0,1,1,0}, {1,1,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,1,0}, {0,0,1,0}, {0,0,0,0} },
        { {0,1,1,0}, {1,1,0,0}, {1,0,0,0}, {0,0,0,0} }
    },
    {
        { {0,1,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} },
        { {0,1,0,0}, {1,1,1,0}, {0,1,0,0}, {0,0,0,0} }
    },
    {
        { {0,1,0,0}, {1,1,0,0}, {0,1,0,0}, {0,1,0,0} },
        { {0,0,0,0}, {1,1,1,1}, {0,0,1,0}, {0,0,0,0} },
        { {0,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,1,0} },
        { {0,1,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0} }
    },
    {
        { {1,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0} },
        { {1,1,0,0}, {0,1,0,0}, {0,1,1,0}, {0,0,0,0} },
        { {0,0,1,0}, {1,1,1,0}, {1,0,0,0}, {0,0,0,0} }
    }
};

Block::Block(int shape) : shape_(shape), angle_(0), x_(Board::COLS / 2 - 2), y_(-2) {}

void Block::reset(int shape, int startX, int startY) {
    shape_ = shape;
    angle_ = 0;
    x_ = startX;
    y_ = startY;
}

bool Block::move(int dx, int dy, const Board& board) {
    int newX = x_ + dx;
    int newY = y_ + dy;
    if (!board.strikeCheck(shape_, angle_, newX, newY)) {
        x_ = newX;
        y_ = newY;
        return true;
    }
    return false;
}

void Block::rotate(const Board& board) {
    int newAngle = (angle_ + 1) % 4;

    const int offsetCount = 5;
    const int dx[offsetCount] = { 0, -1, 1, -2, 2 };
    const int dy[offsetCount] = { 0, 0, 0, 0, 0 };

    for (int i = 0; i < offsetCount; ++i) {
        int newX = x_ + dx[i];
        int newY = y_ + dy[i];

        if (!board.strikeCheck(shape_, newAngle, newX, newY)) {
            angle_ = newAngle;
            x_ = newX;
            y_ = newY;
            return;
        }
    }
}

void Block::rotate() {
    int newAngle = (angle_ + 1) % 4;
    angle_ = newAngle;
}

int Block::getShape() const {
    return shape_;
}

int Block::getAngle() const {
    return angle_;
}

int Block::getX() const {
    return x_;
}

int Block::getY() const {
    return y_;
}

char Block::getBlockShapeData(int shape, int angle, int row, int col) {
    if (shape < 0 || shape >= 21 || angle < 0 || angle >= 4 || row < 0 || row >= 4 || col < 0 || col >= 4) {
        return 0;
    }
    return shapes_[shape][angle][row][col];
}